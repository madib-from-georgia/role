import * as fs from 'fs';
import * as path from 'path';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON
interface Question {
    question: string;
    options: string[];
    optionsType: 'single' | 'multiple';
    source: string[];
    hint?: string;
}

interface QuestionGroup {
    title: string;
    questions: Question[];
}

interface Subsection {
    title: string;
    groups: QuestionGroup[];
    examples: Example[];
    whyImportant: string;
}

interface Example {
    text: string;
    value: string;
}

interface Section {
    title: string;
    subsections: Subsection[];
}

interface Goal {
    title: string;
    description: string;
}

interface Checklist {
    title: string;
    goal: Goal;
    sections: Section[];
}

class MarkdownToJsonConverter {
    private lines: string[] = [];
    private currentLineIndex: number = 0;

    constructor(private markdownContent: string) {
        this.lines = markdownContent.split('\n');
    }

    convert(): Checklist {
        const checklist: Checklist = {
            title: '',
            goal: { title: '', description: '' },
            sections: []
        };

        while (this.currentLineIndex < this.lines.length) {
            const line = this.getCurrentLine();

            if (line.startsWith('# ')) {
                checklist.title = line.replace('# ', '').replace(/^üé≠\s*/, '');
            } else if (line === '## –¶–µ–ª—å —á–µ–∫–ª–∏—Å—Ç–∞') {
                checklist.goal = this.parseGoal();
            } else if (line.startsWith('### ') && line.includes('. ')) {
                const section = this.parseSection();
                if (section) {
                    checklist.sections.push(section);
                }
            }

            this.currentLineIndex++;
        }

        return checklist;
    }

    private getCurrentLine(): string {
        return this.currentLineIndex < this.lines.length ? this.lines[this.currentLineIndex].trim() : '';
    }

    private parseGoal(): Goal {
        this.currentLineIndex++; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        this.currentLineIndex++; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

        let description = '';
        while (this.currentLineIndex < this.lines.length) {
            const line = this.getCurrentLine();
            if (line.startsWith('###') || line.startsWith('##')) {
                break;
            }
            if (line.length > 0) {
                description += line + ' ';
            }
            this.currentLineIndex++;
        }

        this.currentLineIndex--; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥

        return {
            title: '–¶–µ–ª—å',
            description: description.trim()
        };
    }

    private parseSection(): Section | null {
        const sectionTitle = this.getCurrentLine().replace('### ', '');
        const section: Section = {
            title: sectionTitle,
            subsections: []
        };

        this.currentLineIndex++;

        while (this.currentLineIndex < this.lines.length) {
            const line = this.getCurrentLine();

            if (line.startsWith('### ')) {
                // –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è
                this.currentLineIndex--;
                break;
            } else if (line.startsWith('#### ')) {
                const subsection = this.parseSubsection();
                if (subsection) {
                    section.subsections.push(subsection);
                }
            } else {
                this.currentLineIndex++;
            }
        }

        return section;
    }

    private parseSubsection(): Subsection | null {
        const subsectionTitle = this.getCurrentLine().replace('#### ', '');

        const subsection: Subsection = {
            title: subsectionTitle,
            groups: [],
            examples: [],
            whyImportant: ''
        };

        this.currentLineIndex++;

        while (this.currentLineIndex < this.lines.length) {
            const line = this.getCurrentLine();

            if (line.startsWith('##### ')) {
                const groupTitle = line.replace('##### ', '');
                
                if (groupTitle === '–ü—Ä–∏–º–µ—Ä—ã') {
                    // –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø–æ–¥—Å–µ–∫—Ü–∏–∏
                    subsection.examples = this.parseExamples();
                } else if (groupTitle.startsWith('–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ')) {
                    // –í–∞–∂–Ω–æ—Å—Ç—å —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø–æ–¥—Å–µ–∫—Ü–∏–∏
                    subsection.whyImportant = this.parseWhyImportant();
                } else {
                    // –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                    const group = this.parseQuestionGroup(groupTitle);
                    if (group) {
                        subsection.groups.push(group);
                    }
                }
            } else if (line.startsWith('####') || line.startsWith('###')) {
                this.currentLineIndex--;
                break;
            } else {
                this.currentLineIndex++;
            }
        }

        return subsection;
    }

    private parseQuestionGroup(title: string): QuestionGroup | null {
        const group: QuestionGroup = {
            title,
            questions: []
        };

        this.currentLineIndex++;

        while (this.currentLineIndex < this.lines.length) {
            const line = this.getCurrentLine();

            if (line.startsWith('#####') || line.startsWith('####') || line.startsWith('###')) {
                this.currentLineIndex--;
                break;
            } else if (line.startsWith('- ')) {
                const question = this.parseQuestion();
                if (question) {
                    group.questions.push(question);
                }
            } else {
                this.currentLineIndex++;
            }
        }

        return group.questions.length > 0 ? group : null;
    }

    private parseQuestion(): Question | null {
        const questionLine = this.getCurrentLine();
        const questionText = questionLine.replace(/^- /, '').replace(/\?$/, '').trim();

        const question: Question = {
            question: questionText,
            options: [],
            optionsType: 'single',
            source: ['text', 'logic', 'imagination']
        };

        this.currentLineIndex++;

        // –ü–∞—Ä—Å–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        while (this.currentLineIndex < this.lines.length) {
            const line = this.getCurrentLine();

            if (line.startsWith('- –í–∞—Ä–∏–∞–Ω—Ç—ã ')) {
                const { options, optionsType } = this.parseVariants(line);
                question.options = options;
                question.optionsType = optionsType;
            } else if (line.startsWith('- –ü–æ–¥—Å–∫–∞–∑–∫–∞:')) {
                question.hint = line.replace('- –ü–æ–¥—Å–∫–∞–∑–∫–∞:', '').trim();
            } else if (line.startsWith('- ') || line.startsWith('#####') || line.startsWith('####') || line.startsWith('###')) {
                this.currentLineIndex--;
                break;
            }

            this.currentLineIndex++;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º "—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!question.options.includes('—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç')) {
            question.options.push('—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç');
        }

        return question;
    }

    private parseVariants(line: string): { options: string[], optionsType: 'single' | 'multiple' } {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        const match = line.match(/–í–∞—Ä–∏–∞–Ω—Ç—ã \((.*?)\): (.+)/);
        if (!match) {
            return { options: [], optionsType: 'single' };
        }

        const typeText = match[1];
        const optionsText = match[2];

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
        const optionsType: 'single' | 'multiple' = 
            typeText.includes('–º–Ω–æ–≥–æ') ? 'multiple' : 'single';

        // –†–∞–∑–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        const options = optionsText.split(',').map(option => option.trim());

        return { options, optionsType };
    }

    private parseExamples(): Example[] {
        this.currentLineIndex++;
        const examples: Example[] = [];

        while (this.currentLineIndex < this.lines.length) {
            const line = this.getCurrentLine();

            if (line.startsWith('#####') || line.startsWith('####')) {
                this.currentLineIndex--;
                break;
            }

            if (line.startsWith('- *') && line.includes('* ‚Üí')) {
                // –ü–∞—Ä—Å–∏–º –ø—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: - *—Ç–µ–∫—Å—Ç* ‚Üí –≤–æ–ø—Ä–æ—Å
                const match = line.match(/- \*(.+?)\* ‚Üí (.+)/);
                if (match) {
                    examples.push({
                        text: match[1],
                        value: match[2]
                    });
                }
            }

            this.currentLineIndex++;
        }

        return examples;
    }

    private parseWhyImportant(): string {
        const line = this.getCurrentLine();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ "
        const importanceText = line.replace(/^##### –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ\s*/, '');
        
        this.currentLineIndex++;
        
        // –ß–∏—Ç–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        let fullText = importanceText;
        while (this.currentLineIndex < this.lines.length) {
            const nextLine = this.getCurrentLine();
            
            if (nextLine.startsWith('#####') || nextLine.startsWith('####') || nextLine.startsWith('---')) {
                this.currentLineIndex--;
                break;
            }
            
            if (nextLine.trim().length > 0) {
                fullText += ' ' + nextLine.trim();
            }
            
            this.currentLineIndex++;
        }

        return fullText.trim();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
export function convertMarkdownToJson(inputFilePath: string, outputFilePath: string): void {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if (!fs.existsSync(inputFilePath)) {
            throw new Error(`–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${inputFilePath}`);
        }

        const markdownContent = fs.readFileSync(inputFilePath, 'utf-8');
        const converter = new MarkdownToJsonConverter(markdownContent);
        const result = converter.convert();
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const outputDir = path.dirname(outputFilePath);
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        const jsonContent = JSON.stringify(result, null, 4);
        fs.writeFileSync(outputFilePath, jsonContent, 'utf-8');
        
        console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
        console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputFilePath}`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   - –°–µ–∫—Ü–∏–π: ${result.sections.length}`);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        let totalQuestions = 0;
        result.sections.forEach(section => {
            section.subsections.forEach(subsection => {
                subsection.groups.forEach(group => {
                    totalQuestions += group.questions.length;
                });
            });
        });
        console.log(`   - –í–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
function showHelp(): void {
    console.log(`
üìã Markdown to JSON Converter

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npx ts-node scripts/md-to-json-converter.ts <input-file> <output-file>
  npx ts-node scripts/md-to-json-converter.ts --help

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
  input-file    –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É Markdown —Ñ–∞–π–ª—É
  output-file   –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É

–û–ø—Ü–∏–∏:
  --help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npx ts-node scripts/md-to-json-converter.ts docs/modules/01-physical-portrait/ACTOR_PHYSICAL_CHECKLIST.md output.json
  npx ts-node scripts/md-to-json-converter.ts input.md ./output/result.json
`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArguments(): { inputFile: string; outputFile: string } | null {
    const args = process.argv.slice(2);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
    if (args.includes('--help') || args.includes('-h')) {
        showHelp();
        return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if (args.length !== 2) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª—ã');
        console.error('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏');
        process.exit(1);
    }
    
    const [inputFile, outputFile] = args;
    
    return { inputFile, outputFile };
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main(): void {
    const args = parseArguments();
    if (!args) {
        return; // –°–ø—Ä–∞–≤–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞
    }
    
    const { inputFile, outputFile } = args;
    
    console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞: ${inputFile} ‚Üí ${outputFile}`);
    convertMarkdownToJson(inputFile, outputFile);
}

// –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
} 
