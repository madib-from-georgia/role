"""
–ü–∞—Ä—Å–µ—Ä —á–µ–∫–ª–∏—Å—Ç–æ–≤ –∏–∑ Markdown —Ñ–∞–π–ª–æ–≤
"""

import re
from typing import List, Dict, Any, Optional
from pathlib import Path
from loguru import logger


class ChecklistStructure:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞"""
    
    def __init__(self):
        self.title = ""
        self.description = ""
        self.slug = ""
        self.icon = ""
        self.sections = []


class ChecklistSection:
    """–°–µ–∫—Ü–∏—è —á–µ–∫–ª–∏—Å—Ç–∞"""
    
    def __init__(self):
        self.title = ""
        self.number = ""
        self.icon = ""
        self.order_index = 0
        self.subsections = []


class ChecklistSubsection:
    """–ü–æ–¥—Å–µ–∫—Ü–∏—è —á–µ–∫–ª–∏—Å—Ç–∞"""
    
    def __init__(self):
        self.title = ""
        self.number = ""
        self.order_index = 0
        self.question_groups = []


class ChecklistQuestionGroup:
    """–ì—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.title = ""
        self.order_index = 0
        self.questions = []


class ChecklistQuestion:
    """–û—Ç–¥–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    
    def __init__(self):
        self.text = ""
        self.hint = ""
        self.order_index = 0


class ChecklistMarkdownParser:
    """
    –ü–∞—Ä—Å–µ—Ä —á–µ–∫–ª–∏—Å—Ç–æ–≤ –∏–∑ Markdown —Ñ–∞–π–ª–æ–≤
    
    –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ–∫–ª–∏—Å—Ç–∞
    ## üìè 1. –°–ï–ö–¶–ò–Ø
    ### 1.1 –ü–æ–¥—Å–µ–∫—Ü–∏—è
    - –ì—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
      - [ ] **–í–æ–ø—Ä–æ—Å**
        *–ü–æ–¥—Å–∫–∞–∑–∫–∞*
    """
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.title_pattern = r'^# (.+)$'
        self.section_pattern = r'^## (.+)$'
        self.subsection_pattern = r'^### (.+)$'
        self.question_group_pattern = r'^- \*\*(.+)\*\*$'
        self.question_pattern = r'^\s*- \[ \] \*\*(.+?)\*\*'
        self.hint_pattern = r'^\s*\*(.+?)\*$'
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self.alt_question_group_pattern = r'^- (.+)$'
        self.alt_question_pattern = r'^\s+- \[ \] \*\*(.+?)\*\*'
    
    def parse_file(self, file_path: str) -> ChecklistStructure:
        """
        –ü–∞—Ä—Å–∏—Ç Markdown —Ñ–∞–π–ª —á–µ–∫–ª–∏—Å—Ç–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–µ–∫–ª–∏—Å—Ç–∞
        """
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —á–µ–∫–ª–∏—Å—Ç–∞: {file_path}")
        
        file_path = Path(file_path)
        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        checklist = ChecklistStructure()
        checklist.slug = self._generate_slug(file_path.stem)
        
        current_section = None
        current_subsection = None
        current_question_group = None
        last_question = None
        
        section_index = 0
        subsection_index = 0
        group_index = 0
        question_index = 0
        
        for line_num, line in enumerate(lines, 1):
            line = line.rstrip()
            
            if not line:
                continue
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ–∫–ª–∏—Å—Ç–∞
            if match := re.match(self.title_pattern, line):
                title = match.group(1).strip()
                checklist.title = self._clean_title(title)
                checklist.icon = self._extract_icon(title)
                logger.debug(f"–ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {checklist.title}")
                continue
            
            # –°–µ–∫—Ü–∏—è (## –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            if match := re.match(self.section_pattern, line):
                title = match.group(1).strip()
                current_section = ChecklistSection()
                current_section.title = self._clean_title(title)
                current_section.icon = self._extract_icon(title)
                current_section.number = self._extract_number(title)
                current_section.order_index = section_index
                
                checklist.sections.append(current_section)
                section_index += 1
                subsection_index = 0
                
                logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {current_section.title}")
                continue
            
            # –ü–æ–¥—Å–µ–∫—Ü–∏—è (### –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            if match := re.match(self.subsection_pattern, line):
                if current_section is None:
                    logger.warning(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –ü–æ–¥—Å–µ–∫—Ü–∏—è –±–µ–∑ —Å–µ–∫—Ü–∏–∏")
                    continue
                
                title = match.group(1).strip()
                current_subsection = ChecklistSubsection()
                current_subsection.title = self._clean_title(title)
                current_subsection.number = self._extract_number(title)
                current_subsection.order_index = subsection_index
                
                current_section.subsections.append(current_subsection)
                subsection_index += 1
                group_index = 0
                
                logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Å–µ–∫—Ü–∏—è: {current_subsection.title}")
                continue
            
            # –ì—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            if self._is_question_group(line):
                if current_subsection is None:
                    logger.warning(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –ì—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –ø–æ–¥—Å–µ–∫—Ü–∏–∏")
                    continue
                
                title = self._extract_question_group_title(line)
                current_question_group = ChecklistQuestionGroup()
                current_question_group.title = title
                current_question_group.order_index = group_index
                
                current_subsection.question_groups.append(current_question_group)
                group_index += 1
                question_index = 0
                
                logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {current_question_group.title}")
                continue
            
            # –í–æ–ø—Ä–æ—Å
            if match := re.match(self.question_pattern, line):
                if current_question_group is None:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if current_subsection is not None:
                        current_question_group = ChecklistQuestionGroup()
                        current_question_group.title = "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
                        current_question_group.order_index = group_index
                        current_subsection.question_groups.append(current_question_group)
                        group_index += 1
                    else:
                        logger.warning(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –í–æ–ø—Ä–æ—Å –±–µ–∑ –≥—Ä—É–ø–ø—ã")
                        continue
                
                question_text = match.group(1).strip()
                last_question = ChecklistQuestion()
                last_question.text = question_text
                last_question.order_index = question_index
                
                current_question_group.questions.append(last_question)
                question_index += 1
                
                logger.debug(f"–ù–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å: {question_text[:50]}...")
                continue
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –≤–æ–ø—Ä–æ—Å—É
            if match := re.match(self.hint_pattern, line):
                if last_question is not None:
                    hint_text = match.group(1).strip()
                    last_question.hint = hint_text
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞: {hint_text[:50]}...")
                continue
        
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–µ–∫—Ü–∏–π: {len(checklist.sections)}")
        return checklist
    
    def _is_question_group(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≥—Ä—É–ø–ø–æ–π –≤–æ–ø—Ä–æ—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø –≤–æ–ø—Ä–æ—Å–æ–≤
        if re.match(self.question_group_pattern, line):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        if re.match(self.alt_question_group_pattern, line):
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å
            if "- [ ]" not in line and line.strip().endswith("**"):
                return False
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–¥–ø—É–Ω–∫—Ç–∞–º–∏
            return not line.strip().startswith("- [ ]")
        
        return False
    
    def _extract_question_group_title(self, line: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤"""
        # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
        if match := re.match(self.question_group_pattern, line):
            return match.group(1).strip()
        
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        if match := re.match(self.alt_question_group_pattern, line):
            title = match.group(1).strip()
            # –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            title = re.sub(r'\*\*(.+?)\*\*', r'\1', title)
            return title
        
        return line.strip().lstrip('- ').strip()
    
    def _clean_title(self, title: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç —ç–º–æ–¥–∑–∏ –∏ –Ω–æ–º–µ—Ä–æ–≤"""
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
        title = re.sub(r'^[^\w\s]+\s*', '', title)
        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–∞ "1." –∏–ª–∏ "1.1" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "1"
        title = re.sub(r'^\d+(?:\.\d+)*\.?\s*', '', title)
        return title.strip()
    
    def _extract_icon(self, title: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–æ–¥–∑–∏/–∏–∫–æ–Ω–∫—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        match = re.match(r'^([^\w\s]+)', title)
        return match.group(1).strip() if match else ""
    
    def _extract_number(self, title: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        # –ò—â–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏
        match = re.search(r'(\d+(?:\.\d+)?)', title)
        return match.group(1) if match else ""
    
    def _generate_slug(self, filename: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç slug –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "ACTOR_"
        slug = filename.replace("ACTOR_", "")
        # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        slug = slug.replace("_", "-").lower()
        return slug
    
    def get_structure_summary(self, checklist: ChecklistStructure) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ–∫–ª–∏—Å—Ç–∞"""
        total_questions = 0
        sections_summary = []
        
        for section in checklist.sections:
            section_questions = 0
            subsections_summary = []
            
            for subsection in section.subsections:
                subsection_questions = sum(len(group.questions) for group in subsection.question_groups)
                section_questions += subsection_questions
                
                subsections_summary.append({
                    "title": subsection.title,
                    "number": subsection.number,
                    "groups": len(subsection.question_groups),
                    "questions": subsection_questions
                })
            
            total_questions += section_questions
            sections_summary.append({
                "title": section.title,
                "number": section.number,
                "icon": section.icon,
                "subsections": len(section.subsections),
                "questions": section_questions,
                "subsections_detail": subsections_summary
            })
        
        return {
            "title": checklist.title,
            "slug": checklist.slug,
            "icon": checklist.icon,
            "total_sections": len(checklist.sections),
            "total_questions": total_questions,
            "sections": sections_summary
        }
