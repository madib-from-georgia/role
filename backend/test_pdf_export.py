#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å WeasyPrint.
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent))

from app.services.export_service import export_service
from app.database.models.character import Character
from app.schemas.checklist import ChecklistWithResponses


class MockCharacter:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self):
        self.id = 1
        self.name = "–ì–∞–º–ª–µ—Ç"
        self.aliases = ["–ü—Ä–∏–Ω—Ü –î–∞—Ç—Å–∫–∏–π", "–ü—Ä–∏–Ω—Ü –ì–∞–º–ª–µ—Ç"]
        self.importance_score = 9.5
        self.gender = "male"


class MockResponse:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    
    def __init__(self, text="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç", source_type="FOUND_IN_TEXT"):
        self.answer_text = text
        self.source_type = MockSourceType(source_type)
        self.confidence_score = 0.85
        self.comment = "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        self.answer = MockAnswer()


class MockSourceType:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    
    def __init__(self, value):
        self.value = value


class MockAnswer:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞."""
    
    def __init__(self):
        self.hint = "–°–æ–≤–µ—Ç –∞–∫—Ç–µ—Ä—É: –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
        self.exercise = "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–æ–Ω–æ–ª–æ–≥ '–ë—ã—Ç—å –∏–ª–∏ –Ω–µ –±—ã—Ç—å'"
        self.value_male = "–í—ã—Å–æ–∫–∏–π, —Å—Ç–∞—Ç–Ω—ã–π"
        self.value_female = "–í—ã—Å–æ–∫–∞—è, —Å—Ç–∞—Ç–Ω–∞—è"
        self.exported_value_male = "–Ø –≤—ã—Å–æ–∫–∏–π –∏ —Å—Ç–∞—Ç–Ω—ã–π"
        self.exported_value_female = "–Ø –≤—ã—Å–æ–∫–∞—è –∏ —Å—Ç–∞—Ç–Ω–∞—è"


class MockQuestion:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞."""
    
    def __init__(self, text):
        self.text = text
        self.current_response = MockResponse()


class MockQuestionGroup:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤."""
    
    def __init__(self, title):
        self.title = title
        self.questions = [
            MockQuestion("–ö–∞–∫–æ–π —Ä–æ—Å—Ç —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?"),
            MockQuestion("–ö–∞–∫–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?"),
            MockQuestion("–ö–∞–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏?")
        ]


class MockSubsection:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –ø–æ–¥—Å–µ–∫—Ü–∏–∏."""
    
    def __init__(self, title):
        self.title = title
        self.question_groups = [
            MockQuestionGroup("–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"),
            MockQuestionGroup("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏")
        ]


class MockSection:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç —Å–µ–∫—Ü–∏–∏."""
    
    def __init__(self, title):
        self.title = title
        self.subsections = [
            MockSubsection("–û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"),
            MockSubsection("–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
        ]


class MockChecklist:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç —á–µ–∫–ª–∏—Å—Ç–∞."""
    
    def __init__(self, title, description):
        self.title = title
        self.description = description
        self.sections = [
            MockSection("–§–∏–∑–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç"),
            MockSection("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
        ]


async def test_pdf_export():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    character = MockCharacter()
    checklists = [
        MockChecklist(
            "–ú–æ–¥—É–ª—å 1: –§–∏–∑–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç",
            "–ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
        ),
        MockChecklist(
            "–ú–æ–¥—É–ª—å 2: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å", 
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
        )
    ]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    test_dir = Path("test_exports")
    test_dir.mkdir(exist_ok=True)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ —Ç–µ–º—ã
    test_cases = [
        ("detailed", "default", "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞)"),
        ("detailed", "professional", "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ–º–∞)"),
        ("detailed", "creative", "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (—Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —Ç–µ–º–∞)"),
        ("detailed", "minimal", "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ç–µ–º–∞)"),
        ("summary", "professional", "–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ–º–∞)"),
        ("compact", "minimal", "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç—á–µ—Ç (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ç–µ–º–∞)")
    ]
    
    success_count = 0
    total_count = len(test_cases)
    
    for format_type, theme, description in test_cases:
        try:
            print(f"üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {description}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å WeasyPrint
            pdf_bytes = await export_service.export_character_pdf(
                character=character,
                checklists=checklists,
                format_type=format_type,
                user_id=1,
                use_weasyprint=True,
                theme=theme
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            filename = f"test_{format_type}_{theme}_weasy.pdf"
            filepath = test_dir / filename
            
            with open(filepath, 'wb') as f:
                f.write(pdf_bytes)
            
            file_size = len(pdf_bytes) / 1024  # KB
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename} ({file_size:.1f} KB)")
            success_count += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {description}: {str(e)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ ReportLab
    try:
        print(f"üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: Fallback –Ω–∞ ReportLab...")
        
        pdf_bytes = await export_service.export_character_pdf(
            character=character,
            checklists=checklists,
            format_type="detailed",
            user_id=1,
            use_weasyprint=False
        )
        
        filename = "test_detailed_reportlab.pdf"
        filepath = test_dir / filename
        
        with open(filepath, 'wb') as f:
            f.write(pdf_bytes)
        
        file_size = len(pdf_bytes) / 1024  # KB
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename} ({file_size:.1f} KB)")
        success_count += 1
        total_count += 1
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ReportLab PDF: {str(e)}")
        total_count += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_count - success_count}/{total_count}")
    
    if success_count > 0:
        print(f"\nüìÅ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {test_dir.absolute()}")
        print("üîç –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç—á–µ—Ç–æ–≤")
    
    return success_count == total_count


async def test_themes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º."""
    
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º...")
    
    themes = ["professional", "creative", "minimal", "nonexistent"]
    
    for theme in themes:
        try:
            css_content = export_service._load_theme_css(theme)
            if css_content:
                print(f"‚úÖ –¢–µ–º–∞ '{theme}': –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({len(css_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                print(f"‚ö†Ô∏è  –¢–µ–º–∞ '{theme}': –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º—ã '{theme}': {str(e)}")


def test_font_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤."""
    
    print("\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤...")
    
    font_path = export_service._find_cyrillic_font()
    if font_path:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: {font_path}")
    else:
        print("‚ö†Ô∏è  –®—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"üî§ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {export_service.default_font}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WeasyPrint
    try:
        import weasyprint
        print("‚úÖ WeasyPrint –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå WeasyPrint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤
    test_font_detection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–µ–º
    await test_themes()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç PDF
    success = await test_pdf_export()
    
    print(f"\n{'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!' if success else '‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏'}")
    
    return 0 if success else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)