"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤
"""

import pytest
import tempfile
import os
from pathlib import Path

from app.services.checklist_parser import ChecklistMarkdownParser


class TestChecklistParser:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
    
    def setup_method(self):
        self.parser = ChecklistMarkdownParser()
    
    def test_parser_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
        assert self.parser is not None
        assert hasattr(self.parser, 'title_pattern')
        assert hasattr(self.parser, 'section_pattern')
    
    def test_parse_simple_checklist(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞"""
        content = """# üé≠ –¢–µ—Å—Ç–æ–≤—ã–π —á–µ–∫–ª–∏—Å—Ç

## üìè 1. –°–ï–ö–¶–ò–Ø –ü–ï–†–í–ê–Ø

### 1.1 –ü–æ–¥—Å–µ–∫—Ü–∏—è –ø–µ—Ä–≤–∞—è

- **–ì—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–≤–∞—è**
  - [ ] **–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 1?**
    *–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É*

  - [ ] **–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 2?**
    *–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É*

### 1.2 –ü–æ–¥—Å–µ–∫—Ü–∏—è –≤—Ç–æ—Ä–∞—è

- **–ì—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Ç–æ—Ä–∞—è**
  - [ ] **–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 3?**
    *–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ —Ç—Ä–µ—Ç—å–µ–º—É –≤–æ–ø—Ä–æ—Å—É*
"""
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            f.write(content)
            temp_path = f.name
        
        try:
            # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
            structure = self.parser.parse_file(temp_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            assert structure.title == "–¢–µ—Å—Ç–æ–≤—ã–π —á–µ–∫–ª–∏—Å—Ç"
            assert structure.icon == "üé≠"
            assert len(structure.sections) == 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏—é
            section = structure.sections[0]
            assert section.title == "–°–ï–ö–¶–ò–Ø –ü–ï–†–í–ê–Ø"
            assert section.number == "1"
            assert section.icon == "üìè"
            assert len(section.subsections) == 2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Å–µ–∫—Ü–∏—é
            subsection1 = section.subsections[0]
            assert subsection1.title == "–ü–æ–¥—Å–µ–∫—Ü–∏—è –ø–µ—Ä–≤–∞—è"
            assert subsection1.number == "1.1"
            assert len(subsection1.question_groups) == 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É –≤–æ–ø—Ä–æ—Å–æ–≤
            group = subsection1.question_groups[0]
            assert group.title == "–ì—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–≤–∞—è"
            assert len(group.questions) == 2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            question1 = group.questions[0]
            assert question1.text == "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 1?"
            assert question1.hint == "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
            
            question2 = group.questions[1]
            assert question2.text == "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 2?"
            assert question2.hint == "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_path)
    
    def test_get_structure_summary(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        content = """# üé≠ –¢–µ—Å—Ç–æ–≤—ã–π —á–µ–∫–ª–∏—Å—Ç

## üìè 1. –ü–ï–†–í–ê–Ø –°–ï–ö–¶–ò–Ø

### 1.1 –ü–æ–¥—Å–µ–∫—Ü–∏—è

- **–ì—Ä—É–ø–ø–∞**
  - [ ] **–í–æ–ø—Ä–æ—Å 1?**
  - [ ] **–í–æ–ø—Ä–æ—Å 2?**

## üé® 2. –í–¢–û–†–ê–Ø –°–ï–ö–¶–ò–Ø

### 2.1 –ü–æ–¥—Å–µ–∫—Ü–∏—è

- **–ì—Ä—É–ø–ø–∞**
  - [ ] **–í–æ–ø—Ä–æ—Å 3?**
"""
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            f.write(content)
            temp_path = f.name
        
        try:
            structure = self.parser.parse_file(temp_path)
            summary = self.parser.get_structure_summary(structure)
            
            assert summary["title"] == "–¢–µ—Å—Ç–æ–≤—ã–π —á–µ–∫–ª–∏—Å—Ç"
            assert summary["total_sections"] == 2
            assert summary["total_questions"] == 3
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ–∫—Ü–∏–π
            sections = summary["sections"]
            assert len(sections) == 2
            
            assert sections[0]["title"] == "–ü–ï–†–í–ê–Ø –°–ï–ö–¶–ò–Ø"
            assert sections[0]["questions"] == 2
            
            assert sections[1]["title"] == "–í–¢–û–†–ê–Ø –°–ï–ö–¶–ò–Ø"
            assert sections[1]["questions"] == 1
            
        finally:
            os.unlink(temp_path)
    
    def test_slug_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug"""
        assert self.parser._generate_slug("ACTOR_PHYSICAL_CHECKLIST") == "physical-checklist"
        assert self.parser._generate_slug("ACTOR_EMOTIONAL_CHECKLIST") == "emotional-checklist"
        assert self.parser._generate_slug("TEST_FILE") == "test-file"
    
    def test_clean_title(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        assert self.parser._clean_title("üé≠ 1. –ó–ê–ì–û–õ–û–í–û–ö") == "–ó–ê–ì–û–õ–û–í–û–ö"
        assert self.parser._clean_title("üìè –ó–ê–ì–û–õ–û–í–û–ö –ë–ï–ó –ù–û–ú–ï–†–ê") == "–ó–ê–ì–û–õ–û–í–û–ö –ë–ï–ó –ù–û–ú–ï–†–ê"
        assert self.parser._clean_title("2. –ü–†–û–°–¢–û –ó–ê–ì–û–õ–û–í–û–ö") == "–ü–†–û–°–¢–û –ó–ê–ì–û–õ–û–í–û–ö"
    
    def test_extract_icon(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫"""
        assert self.parser._extract_icon("üé≠ –ó–∞–≥–æ–ª–æ–≤–æ–∫") == "üé≠"
        assert self.parser._extract_icon("üìè 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫") == "üìè"
        assert self.parser._extract_icon("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∏–∫–æ–Ω–∫–∏") == ""
    
    def test_extract_number(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤"""
        assert self.parser._extract_number("1. –ó–ê–ì–û–õ–û–í–û–ö") == "1"
        assert self.parser._extract_number("üé≠ 2.5 –ó–ê–ì–û–õ–û–í–û–ö") == "2.5"
        assert self.parser._extract_number("–ó–ê–ì–û–õ–û–í–û–ö –ë–ï–ó –ù–û–ú–ï–†–ê") == ""
    
    def test_parse_real_checklist_structure(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ–∫–ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º —á–µ–∫–ª–∏—Å—Ç–æ–≤
        project_root = Path(__file__).parent.parent.parent
        physical_checklist = project_root / "docs/modules/01-physical-portrait/ACTOR_PHYSICAL_CHECKLIST.md"
        
        if physical_checklist.exists():
            try:
                structure = self.parser.parse_file(str(physical_checklist))
                summary = self.parser.get_structure_summary(structure)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª
                assert summary["title"]
                assert summary["total_sections"] > 0
                assert summary["total_questions"] > 0
                assert summary["slug"] == "physical-checklist"
                
                print(f"–§–∏–∑–∏—á–µ—Å–∫–∏–π —á–µ–∫–ª–∏—Å—Ç: {summary['total_questions']} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ {summary['total_sections']} —Å–µ–∫—Ü–∏—è—Ö")
                
            except Exception as e:
                pytest.skip(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {e}")
        else:
            pytest.skip("–†–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ–∫–ª–∏—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        with pytest.raises(FileNotFoundError):
            self.parser.parse_file("nonexistent_file.md")
        
        # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            f.write("")
            temp_path = f.name
        
        try:
            structure = self.parser.parse_file(temp_path)
            # –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            assert structure.title == ""
            assert len(structure.sections) == 0
        finally:
            os.unlink(temp_path)
