"""
–¢–µ—Å—Ç—ã –¥–ª—è API —á–µ–∫–ª–∏—Å—Ç–æ–≤
"""

import pytest
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app.main import app
from app.schemas.checklist import ChecklistResponseCreate, SourceType
from app.database.models.checklist import Checklist, ChecklistSection


class TestChecklistAPI:
    """–¢–µ—Å—Ç—ã –¥–ª—è API endpoints —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
    
    def test_get_checklists_unauthorized(self, test_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–ª–∏—Å—Ç–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        response = test_client.get("/api/checklists/")
        assert response.status_code == 401
    
    def test_get_checklists_authorized(self, test_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        response = test_client.get("/api/checklists/")
        assert response.status_code == 200
        
        data = response.json()
        assert isinstance(data, list)
        # –°–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —á–µ–∫–ª–∏—Å—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    
    def test_get_checklist_for_character_not_found(self, test_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–ª–∏—Å—Ç–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        response = test_client.get(
            "/api/checklists/physical-checklist/character/999"
        )
        assert response.status_code == 404
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in response.json()["detail"]
    
    def test_create_response_unauthorized(self, test_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        response_data = {
            "question_id": 1,
            "character_id": 1,
            "answer": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
            "source_type": "imagined"
        }
        
        response = test_client.post("/api/checklists/responses", json=response_data)
        assert response.status_code == 401
    
    def test_create_response_character_not_found(self, test_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        response_data = {
            "question_id": 1,
            "character_id": 999,
            "answer": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
            "source_type": "imagined"
        }
        
        response = test_client.post(
            "/api/checklists/responses", 
            json=response_data
        )
        assert response.status_code == 404
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in response.json()["detail"]
    
    def test_delete_response_not_found(self, test_client):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        response = test_client.delete("/api/checklists/responses/999")
        assert response.status_code == 404
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in response.json()["detail"]
    
    def test_get_character_progress_not_found(self, test_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        response = test_client.get("/api/checklists/character/999/progress")
        assert response.status_code == 404
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in response.json()["detail"]
    
    def test_checklist_api_endpoints_structure(self, test_client):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API endpoints"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ endpoints –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ OpenAPI
        response = test_client.get("/openapi.json")
        assert response.status_code == 200
        
        openapi_data = response.json()
        paths = openapi_data.get("paths", {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
        expected_endpoints = [
            "/api/checklists/",
            "/api/checklists/{checklist_slug}/character/{character_id}",
            "/api/checklists/responses",
            "/api/checklists/character/{character_id}/progress"
        ]
        
        for endpoint in expected_endpoints:
            assert endpoint in paths, f"Endpoint {endpoint} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ OpenAPI —Å—Ö–µ–º–µ"


class TestChecklistIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
    
    def test_checklist_models_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
        from app.database.models.checklist import (
            Checklist, ChecklistSection, ChecklistSubsection,
            ChecklistQuestionGroup, ChecklistQuestion, ChecklistResponse
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        assert Checklist.__tablename__ == "checklists"
        assert ChecklistSection.__tablename__ == "checklist_sections"
        assert ChecklistResponse.__tablename__ == "checklist_responses"
    
    def test_checklist_schemas_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Pydantic —Å—Ö–µ–º"""
        from app.schemas.checklist import (
            ChecklistResponseCreate, SourceType
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º enum –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        assert SourceType.FOUND_IN_TEXT == "found_in_text"
        assert SourceType.LOGICALLY_DERIVED == "logically_derived"
        assert SourceType.IMAGINED == "imagined"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –æ—Ç–≤–µ—Ç–∞
        response_data = ChecklistResponseCreate(
            question_id=1,
            character_id=1,
            answer="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
            source_type=SourceType.IMAGINED,
            comment="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        )
        
        assert response_data.question_id == 1
        assert response_data.character_id == 1
        assert response_data.source_type == SourceType.IMAGINED
    
    def test_checklist_service_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
        from app.services.checklist_service import checklist_service
        
        assert checklist_service is not None
        assert hasattr(checklist_service, 'parser')
        assert hasattr(checklist_service, 'import_checklist_from_file')
        assert hasattr(checklist_service, 'get_checklist_with_responses')
    
    def test_checklist_parser_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
        from app.services.checklist_parser import ChecklistMarkdownParser
        
        parser = ChecklistMarkdownParser()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        assert hasattr(parser, 'parse_file')
        assert hasattr(parser, 'get_structure_summary')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
        assert hasattr(parser, '_clean_title')
        assert hasattr(parser, '_extract_icon')
        assert hasattr(parser, '_extract_number')


@pytest.fixture
def sample_checklist_data():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–ª–∏—Å—Ç–∞"""
    return {
        "title": "–¢–µ—Å—Ç–æ–≤—ã–π —á–µ–∫–ª–∏—Å—Ç",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞",
        "slug": "test-checklist",
        "icon": "üé≠",
        "order_index": 0,
        "is_active": True
    }


@pytest.fixture
def sample_response_data():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞"""
    return {
        "question_id": 1,
        "character_id": 1,
        "answer": "–í—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç, –æ–∫–æ–ª–æ 180 —Å–º",
        "source_type": "found_in_text",
        "comment": "–ù–∞–π–¥–µ–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: '–ò–≤–∞–Ω –±—ã–ª –≤—ã—Å–æ–∫'"
    }
