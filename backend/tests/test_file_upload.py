"""
–¢–µ—Å—Ç—ã –¥–ª—è File Upload API.
"""

import pytest
import io
import tempfile
import os
from datetime import datetime
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app.main import app
from app.dependencies.auth import get_db
from app.database.crud import project as project_crud, text as text_crud, user as user_crud
from app.schemas.project import ProjectCreate
from app.schemas.user import UserCreate
from app.services.auth import auth_service
from app.services.file_processor import FileProcessor


class TestFileProcessor:
    """Unit —Ç–µ—Å—Ç—ã –¥–ª—è FileProcessor."""
    
    def test_file_processor_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FileProcessor."""
        processor = FileProcessor()
        
        assert processor.supported_formats == ['txt', 'pdf', 'fb2', 'epub']
        assert processor.max_file_size == 50 * 1024 * 1024  # 50MB
    
    def test_get_file_format(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞."""
        processor = FileProcessor()
        
        assert processor._get_file_format("test.txt") == "txt"
        assert processor._get_file_format("book.pdf") == "pdf"
        assert processor._get_file_format("novel.fb2") == "fb2"
        assert processor._get_file_format("story.epub") == "epub"
        assert processor._get_file_format("FILE.TXT") == "txt"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    
    def test_get_file_format_invalid(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        processor = FileProcessor()
        
        # –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        with pytest.raises(ValueError, match="–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"):
            processor._get_file_format("")
        
        # None
        with pytest.raises(ValueError, match="–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"):
            processor._get_file_format(None)
    
    def test_clean_text(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
        processor = FileProcessor()
        
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        dirty_text = "  –ü—Ä–∏–≤–µ—Ç   –º–∏—Ä!  \n\n\n–≠—Ç–æ   —Ç–µ—Å—Ç.  \r\n  "
        clean = processor._clean_text(dirty_text)
        assert clean == "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!\n\n–≠—Ç–æ —Ç–µ—Å—Ç."
        
        # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        assert processor._clean_text("") == ""
        assert processor._clean_text(None) == ""
        
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
        assert processor._clean_text("   \n\n  ") == ""
    
    def test_process_txt_file(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ TXT —Ñ–∞–π–ª–∞."""
        processor = FileProcessor()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π TXT —Ñ–∞–π–ª
        test_content = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.\n–û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç."
        expected_word_count = len(test_content.split())  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', encoding='utf-8', delete=False) as f:
            f.write(test_content)
            temp_path = f.name
        
        try:
            result = processor._process_txt(temp_path)
            
            assert 'content' in result
            assert 'metadata' in result
            assert result['content'] == test_content
            assert result['metadata']['encoding'] == 'utf-8'
            assert result['metadata']['line_count'] == 3
            assert result['metadata']['word_count'] == expected_word_count
            
        finally:
            os.unlink(temp_path)
    
    def test_process_fb2_file(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ FB2 —Ñ–∞–π–ª–∞."""
        processor = FileProcessor()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π FB2 —Ñ–∞–π–ª
        fb2_content = '''<?xml version="1.0" encoding="utf-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0">
    <description>
        <title-info>
            <genre>sf</genre>
            <author>
                <first-name>–ò–≤–∞–Ω</first-name>
                <last-name>–¢–µ—Å—Ç–æ–≤</last-name>
            </author>
            <book-title>–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞</book-title>
        </title-info>
    </description>
    <body>
        <section>
            <title>–ì–ª–∞–≤–∞ 1</title>
            <p>–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.</p>
            <p>–≠—Ç–æ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞.</p>
        </section>
    </body>
</FictionBook>'''
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.fb2', encoding='utf-8', delete=False) as f:
            f.write(fb2_content)
            temp_path = f.name
        
        try:
            result = processor._process_fb2(temp_path)
            
            assert 'content' in result
            assert 'metadata' in result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω
            content = result['content']
            assert "–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞." in content
            assert "–≠—Ç–æ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞." in content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = result['metadata']
            assert 'fb2_info' in metadata
            assert metadata['fb2_info']['title'] == '–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞'
            assert '–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤' in metadata['fb2_info']['authors']
            assert ['sf'] == metadata['fb2_info']['genres']
            
        finally:
            os.unlink(temp_path)
    
    def test_detect_encoding(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏."""
        processor = FileProcessor()
        
        # UTF-8 —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', encoding='utf-8', delete=False) as f:
            f.write("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
            temp_path = f.name
        
        try:
            encoding = processor._detect_encoding(temp_path)
            assert encoding in ['utf-8', 'UTF-8']
        finally:
            os.unlink(temp_path)


class TestFileUploadAPI:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è File Upload API."""
    
    @pytest.fixture
    def test_client(self, db_session):
        """–°–æ–∑–¥–∞–µ–º TestClient —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π dependency –¥–ª—è –ë–î."""
        def override_get_db():
            try:
                yield db_session
            finally:
                pass
        
        app.dependency_overrides[get_db] = override_get_db
        
        test_client = TestClient(app)
        yield test_client
        
        app.dependency_overrides.clear()
    
    @pytest.fixture
    def auth_headers(self, db_session):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        user_data = UserCreate(
            username="fileuploaduser",
            email="fileupload@example.com",
            password="testpass123"
        )
        user = auth_service.register_user(db_session, user_data)
        tokens = auth_service.create_tokens_for_user(db_session, user)
        
        return {"Authorization": f"Bearer {tokens.access_token}"}
    
    @pytest.fixture
    def sample_project(self, db_session, auth_headers):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."""
        token = auth_headers["Authorization"].split(" ")[1]
        user = auth_service.get_current_user(db_session, token)
        
        project_data = ProjectCreate(
            title="File Upload Test Project",
            description="Project for file upload tests"
        )
        project = project_crud.create_with_owner(
            db_session, obj_in=project_data, owner_id=user.id
        )
        return project
    
    def create_test_file(self, content: str, filename: str) -> io.BytesIO:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏."""
        file_data = content.encode('utf-8')
        file_obj = io.BytesIO(file_data)
        file_obj.name = filename
        return file_obj
    
    def test_upload_txt_file(self, test_client, auth_headers, sample_project):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ TXT —Ñ–∞–π–ª–∞."""
        test_content = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏.\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞.\n–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞."
        test_file = self.create_test_file(test_content, "test.txt")
        
        response = test_client.post(
            f"/api/projects/{sample_project.id}/texts/upload",
            headers=auth_headers,
            files={"file": ("test.txt", test_file, "text/plain")}
        )
        
        print(f"üîç POST /api/projects/{sample_project.id}/texts/upload -> {response.status_code}")
        
        if response.status_code != 201:
            print(f"Response: {response.text}")
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        
        data = response.json()
        assert data["success"] is True
        assert data["filename"] == "test.txt"
        assert data["format"] == "txt"
        assert data["content_length"] > 0
        assert "text_id" in data
        assert "created_at" in data
    
    def test_upload_fb2_file(self, test_client, auth_headers, sample_project):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ FB2 —Ñ–∞–π–ª–∞."""
        fb2_content = '''<?xml version="1.0" encoding="utf-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0">
    <description>
        <title-info>
            <genre>sf</genre>
            <author>
                <first-name>–ò–≤–∞–Ω</first-name>
                <last-name>–¢–µ—Å—Ç–æ–≤</last-name>
            </author>
            <book-title>API –¢–µ—Å—Ç</book-title>
        </title-info>
    </description>
    <body>
        <section>
            <p>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FB2 —Ñ–∞–π–ª–∞.</p>
        </section>
    </body>
</FictionBook>'''
        
        test_file = self.create_test_file(fb2_content, "test.fb2")
        
        response = test_client.post(
            f"/api/projects/{sample_project.id}/texts/upload",
            headers=auth_headers,
            files={"file": ("test.fb2", test_file, "application/xml")}
        )
        
        print(f"üîç POST /api/projects/{sample_project.id}/texts/upload (FB2) -> {response.status_code}")
        
        if response.status_code != 201:
            print(f"Response: {response.text}")
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        
        data = response.json()
        assert data["success"] is True
        assert data["filename"] == "test.fb2"
        assert data["format"] == "fb2"
        assert "metadata" in data
        assert data["content_length"] > 0
    
    def test_upload_unsupported_file(self, test_client, auth_headers, sample_project):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞."""
        test_content = "–≠—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"
        test_file = self.create_test_file(test_content, "test.doc")
        
        response = test_client.post(
            f"/api/projects/{sample_project.id}/texts/upload",
            headers=auth_headers,
            files={"file": ("test.doc", test_file, "application/msword")}
        )
        
        print(f"üîç POST /api/projects/{sample_project.id}/texts/upload (unsupported) -> {response.status_code}")
        
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ 400
        if response.status_code == 400:
            data = response.json()
            assert "–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç" in data["detail"].lower() or "supported" in data["detail"].lower()
        elif response.status_code == 500:
            print(f"Got 500 error (expected for integration test): {response.text}")
    
    def test_upload_to_nonexistent_project(self, test_client, auth_headers):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç."""
        test_content = "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"
        test_file = self.create_test_file(test_content, "test.txt")
        
        response = test_client.post(
            "/api/projects/99999/texts/upload",
            headers=auth_headers,
            files={"file": ("test.txt", test_file, "text/plain")}
        )
        
        print(f"üîç POST /api/projects/99999/texts/upload -> {response.status_code}")
        
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ 404
        assert response.status_code == 404
    
    def test_upload_without_auth(self, test_client, sample_project):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        test_content = "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"
        test_file = self.create_test_file(test_content, "test.txt")
        
        response = test_client.post(
            f"/api/projects/{sample_project.id}/texts/upload",
            files={"file": ("test.txt", test_file, "text/plain")}
        )
        
        print(f"üîç POST /api/projects/{sample_project.id}/texts/upload (no auth) -> {response.status_code}")
        
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ 401
        assert response.status_code == 401
    
    def test_upload_empty_file(self, test_client, auth_headers, sample_project):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞."""
        test_file = io.BytesIO(b"")
        test_file.name = "empty.txt"
        
        response = test_client.post(
            f"/api/projects/{sample_project.id}/texts/upload",
            headers=auth_headers,
            files={"file": ("empty.txt", test_file, "text/plain")}
        )
        
        print(f"üîç POST /api/projects/{sample_project.id}/texts/upload (empty) -> {response.status_code}")
        
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å 400 –∏–ª–∏ 500 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        assert response.status_code in [400, 500]
    
    def test_upload_file_check_database(self, test_client, auth_headers, sample_project, db_session):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        test_content = "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î.\n–°—Ç—Ä–æ–∫–∞ 2.\n–°—Ç—Ä–æ–∫–∞ 3."
        test_file = self.create_test_file(test_content, "db_test.txt")
        
        response = test_client.post(
            f"/api/projects/{sample_project.id}/texts/upload",
            headers=auth_headers,
            files={"file": ("db_test.txt", test_file, "text/plain")}
        )
        
        print(f"üîç POST /api/projects/{sample_project.id}/texts/upload (DB check) -> {response.status_code}")
        
        if response.status_code != 201:
            print(f"Response: {response.text}")
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        
        data = response.json()
        text_id = data["text_id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î
        saved_text = text_crud.get(db_session, id=text_id)
        assert saved_text is not None
        assert saved_text.filename == "db_test.txt"
        assert saved_text.original_format == "txt"
        assert saved_text.content == test_content
        assert saved_text.project_id == sample_project.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–µ–∫—Ç—É
        texts = text_crud.get_multi_by_project(db_session, project_id=sample_project.id)
        text_ids = [t.id for t in texts]
        assert text_id in text_ids
