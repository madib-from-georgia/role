"""
–¢–µ—Å—Ç—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤ –∏–∑ Markdown —Ñ–∞–π–ª–æ–≤
"""

import pytest
import tempfile
import os
from pathlib import Path
from sqlalchemy.orm import Session

from app.services.checklist_service import checklist_service
from app.services.checklist_parser import ChecklistMarkdownParser


class TestChecklistImport:
    """–¢–µ—Å—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
    
    def test_validate_checklist_file_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —á–µ–∫–ª–∏—Å—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        valid_content = """# –¢–µ—Å—Ç–æ–≤—ã–π —á–µ–∫–ª–∏—Å—Ç

## üìè 1. –¢–ï–°–¢–û–í–ê–Ø –°–ï–ö–¶–ò–Ø

### 1.1 –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥—Å–µ–∫—Ü–∏—è

**–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:**
- **–ì—Ä—É–ø–ø–∞ 1**
  - [ ] **–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 1?**
    *–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞*

  - [ ] **–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 2?**
    *–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞*
"""
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False, encoding='utf-8') as f:
            f.write(valid_content)
            temp_file = f.name
        
        try:
            validation = checklist_service.validate_checklist_file(temp_file)
            
            assert validation["valid"] is True
            assert validation["errors"] == []
            assert validation["summary"] is not None
            assert "slug" in validation["summary"]
            assert "total_sections" in validation["summary"]
            assert "total_questions" in validation["summary"]
            
        finally:
            os.unlink(temp_file)
    
    def test_validate_checklist_file_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        invalid_content = "–≠—Ç–æ –Ω–µ —á–µ–∫–ª–∏—Å—Ç"
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False, encoding='utf-8') as f:
            f.write(invalid_content)
            temp_file = f.name
        
        try:
            validation = checklist_service.validate_checklist_file(temp_file)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
            assert isinstance(validation, dict)
            assert "valid" in validation
            assert "errors" in validation
            
        finally:
            os.unlink(temp_file)
    
    def test_validate_nonexistent_file(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        validation = checklist_service.validate_checklist_file("/nonexistent/file.md")
        
        assert validation["valid"] is False
        assert len(validation["errors"]) > 0
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in validation["errors"][0] or "not found" in validation["errors"][0].lower()
    
    def test_checklist_parser_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞—Ä—Å–µ—Ä–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
        parser = ChecklistMarkdownParser()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        assert hasattr(parser, 'title_pattern')
        assert hasattr(parser, 'section_pattern')
        assert hasattr(parser, 'subsection_pattern')
        assert hasattr(parser, 'question_pattern')
        assert hasattr(parser, 'hint_pattern')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        assert hasattr(parser, 'parse_file')
        assert callable(parser.parse_file)
    
    def test_checklist_parser_patterns(self):
        """–¢–µ—Å—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ø–∞—Ä—Å–µ—Ä–∞"""
        parser = ChecklistMarkdownParser()
        
        # –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        import re
        
        title_match = re.match(parser.title_pattern, "# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ–∫–ª–∏—Å—Ç–∞")
        assert title_match is not None
        assert title_match.group(1) == "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ–∫–ª–∏—Å—Ç–∞"
        
        # –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å–µ–∫—Ü–∏–π
        section_match = re.match(parser.section_pattern, "## üìè 1. –°–ï–ö–¶–ò–Ø")
        assert section_match is not None
        
        # –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–¥—Å–µ–∫—Ü–∏–π
        subsection_match = re.match(parser.subsection_pattern, "### 1.1 –ü–æ–¥—Å–µ–∫—Ü–∏—è")
        assert subsection_match is not None
        
        # –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_match = re.match(parser.question_pattern, "  - [ ] **–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å?**")
        assert question_match is not None
        assert question_match.group(1) == "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å?"
    
    def test_import_script_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫—Ä–∏–ø—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞"""
        import sys
        from pathlib import Path
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
        scripts_path = Path(__file__).parent.parent / "scripts"
        sys.path.insert(0, str(scripts_path))
        
        try:
            import import_checklists
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
            assert hasattr(import_checklists, 'CHECKLIST_FILES')
            assert isinstance(import_checklists.CHECKLIST_FILES, list)
            assert len(import_checklists.CHECKLIST_FILES) >= 20  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 20 –º–æ–¥—É–ª–µ–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
            for file_path, description in import_checklists.CHECKLIST_FILES:
                assert isinstance(file_path, str)
                assert isinstance(description, str)
                assert file_path.endswith('.md')
                assert 'docs/modules/' in file_path
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            assert hasattr(import_checklists, 'import_checklist_files')
            assert hasattr(import_checklists, 'validate_all_checklists')
            assert callable(import_checklists.import_checklist_files)
            assert callable(import_checklists.validate_all_checklists)
            
        finally:
            sys.path.pop(0)


class TestChecklistModules:
    """–¢–µ—Å—Ç—ã –º–æ–¥—É–ª–µ–π —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
    
    def test_physical_portrait_checklist_exists(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–µ–∫–ª–∏—Å—Ç–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞"""
        checklist_path = Path("docs/modules/01-physical-portrait/ACTOR_PHYSICAL_CHECKLIST.md")
        assert checklist_path.exists(), f"–§–∞–π–ª —á–µ–∫–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {checklist_path}"
    
    def test_emotional_profile_checklist_exists(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–µ–∫–ª–∏—Å—Ç–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        checklist_path = Path("docs/modules/02-emotional-profile/ACTOR_EMOTIONAL_CHECKLIST.md")
        assert checklist_path.exists(), f"–§–∞–π–ª —á–µ–∫–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {checklist_path}"
    
    def test_all_checklist_modules_exist(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
        expected_modules = [
            "01-physical-portrait",
            "02-emotional-profile", 
            "03-speech-characteristics",
            "04-internal-conflicts",
            "05-motivation-goals",
            "06-character-relationships",
            "07-biography-backstory",
            "08-social-status",
            "09-key-scenes",
            "10-acting-tasks",
            "11-practical-exercises",
            "12-subtext-analysis",
            "13-tempo-rhythm",
            "14-personality-type",
            "15-defense-mechanisms",
            "16-trauma-ptsd",
            "17-archetypes",
            "18-emotional-intelligence",
            "19-cognitive-distortions",
            "20-attachment-styles"
        ]
        
        modules_dir = Path("docs/modules")
        assert modules_dir.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥—É–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        for module_name in expected_modules:
            module_dir = modules_dir / module_name
            assert module_dir.exists(), f"–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {module_name}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —á–µ–∫–ª–∏—Å—Ç–∞
            checklist_files = list(module_dir.glob("ACTOR_*.md"))
            assert len(checklist_files) > 0, f"–§–∞–π–ª —á–µ–∫–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ: {module_name}"
    
    def test_checklist_files_readable(self):
        """–¢–µ—Å—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
        modules_dir = Path("docs/modules")
        
        if not modules_dir.exists():
            pytest.skip("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥—É–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        checklist_files = list(modules_dir.glob("*/ACTOR_*.md"))
        assert len(checklist_files) > 0, "–§–∞–π–ª—ã —á–µ–∫–ª–∏—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        for checklist_file in checklist_files[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
            try:
                with open(checklist_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    assert len(content) > 0, f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {checklist_file}"
                    assert "# " in content, f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ: {checklist_file}"
            except Exception as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {checklist_file}: {e}")