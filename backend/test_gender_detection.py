#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app.services.nlp.gender_detector import GenderDetector
from app.services.nlp.models import Gender


def test_gender_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
    detector = GenderDetector()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        # (–∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ, –æ–∂–∏–¥–∞–µ–º—ã–π_–ø–æ–ª)
        ("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–º–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫", Gender.MALE),
        ("–ú–∞—Ä–∏—è", "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞", Gender.FEMALE),
        ("–ò–≤–∞–Ω", None, Gender.MALE),
        ("–ê–Ω–Ω–∞", None, Gender.FEMALE),
        ("–í–ª–∞–¥–∏–º–∏—Ä", "–æ–Ω —Å–∫–∞–∑–∞–ª", Gender.MALE),
        ("–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞", Gender.FEMALE),
        ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", None, Gender.UNKNOWN),
        ("–ö–æ—Ä–æ–ª—å", "–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å—Ç—Ä–∞–Ω—ã", Gender.MALE),
        ("–ö–æ—Ä–æ–ª–µ–≤–∞", "–ø—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∏—Ü–∞", Gender.FEMALE),
        ("–î–º–∏—Ç—Ä–∏–π", "–≥—Ä–∞—Ñ, –∑–Ω–∞—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫", Gender.MALE),
        ("–ö–Ω—è–≥–∏–Ω—è", "–∑–Ω–∞—Ç–Ω–∞—è –¥–∞–º–∞", Gender.FEMALE),
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
    print("=" * 60)
    
    correct = 0
    total = len(test_cases)
    
    for name, description, expected_gender in test_cases:
        detected_gender = detector.detect_gender(name, description)
        confidence = detector.get_confidence_score(name, description)
        
        is_correct = detected_gender == expected_gender
        if is_correct:
            correct += 1
            status = "‚úÖ"
        else:
            status = "‚ùå"
        
        print(f"{status} {name:15} | {str(detected_gender.value):8} | {confidence:.2f} | {description or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}")
    
    print("=" * 60)
    accuracy = (correct / total) * 100
    print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å: {correct}/{total} ({accuracy:.1f}%)")
    
    if accuracy >= 80:
        print("üéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        return False


async def test_nlp_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å NLP –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º."""
    from app.services.nlp.extractors.character_extractor import CharacterExtractor
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å NLP...")
    print("=" * 60)
    
    extractor = CharacterExtractor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—å–µ—Å—ã
    test_text = """
    –î–ï–ô–°–¢–í–£–Æ–©–ò–ï –õ–ò–¶–ê:
    
    –ò–í–ê–ù –ü–ï–¢–†–û–í–ò–ß - –º–æ–ª–æ–¥–æ–π –¥–≤–æ—Ä—è–Ω–∏–Ω
    –ú–ê–†–ò–Ø –ò–í–ê–ù–û–í–ù–ê - –µ–≥–æ —Å–µ—Å—Ç—Ä–∞
    –ì–†–ê–§ –ê–õ–ï–ö–°–ê–ù–î–† - —Å—Ç–∞—Ä—ã–π –¥—Ä—É–≥ —Å–µ–º—å–∏
    
    –î–ï–ô–°–¢–í–ò–ï –ü–ï–†–í–û–ï
    
    –ò–í–ê–ù –ü–ï–¢–†–û–í–ò–ß: –°–µ—Å—Ç—Ä–∞, —Ç—ã –≥–æ—Ç–æ–≤–∞ –∫ –±–∞–ª—É?
    
    –ú–ê–†–ò–Ø –ò–í–ê–ù–û–í–ù–ê: –î–∞, –±—Ä–∞—Ç, —è —É–∂–µ –æ–¥–µ—Ç–∞.
    
    –ì–†–ê–§ –ê–õ–ï–ö–°–ê–ù–î–†: –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–∞—Å, —Å—É–¥–∞—Ä—ã–Ω—è.
    """
    
    try:
        characters, speech, stats = await extractor.extract_characters_and_speech(test_text)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(characters)}")
        print("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª–æ–º:")
        
        for char in characters:
            gender_str = char.gender.value if hasattr(char, 'gender') and char.gender else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            print(f"  - {char.name}: {gender_str}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        gender_results = {}
        for char in characters:
            if hasattr(char, 'gender') and char.gender:
                gender_results[char.name] = char.gender.value
        
        expected_genders = {
            "–ò–í–ê–ù –ü–ï–¢–†–û–í–ò–ß": "male",
            "–ú–ê–†–ò–Ø –ò–í–ê–ù–û–í–ù–ê": "female", 
            "–ì–†–ê–§ –ê–õ–ï–ö–°–ê–ù–î–†": "male"
        }
        
        correct_genders = 0
        for name, expected in expected_genders.items():
            if name in gender_results and gender_results[name] == expected:
                correct_genders += 1
                print(f"‚úÖ {name}: {gender_results[name]} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
            else:
                actual = gender_results.get(name, "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                print(f"‚ùå {name}: {actual} (–æ–∂–∏–¥–∞–ª—Å—è {expected})")
        
        accuracy = (correct_genders / len(expected_genders)) * 100
        print(f"\nüìä –¢–æ—á–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {correct_genders}/{len(expected_genders)} ({accuracy:.1f}%)")
        
        return accuracy >= 80
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞
    test1_passed = test_gender_detection()
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å NLP
    test2_passed = asyncio.run(test_nlp_integration())
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"  –ë–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_passed else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å NLP:        {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_passed else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚ú® –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)