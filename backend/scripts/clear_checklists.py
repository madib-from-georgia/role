"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–∫–ª–∏—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(str(Path(__file__).parent.parent))

from sqlalchemy.orm import Session
from app.database.connection import SessionLocal, init_db
from app.database.crud.crud_checklist import checklist
from app.database.crud.crud_checklist_response import checklist_response
from app.database.models.checklist import (
    Checklist, ChecklistSection, ChecklistSubsection, 
    ChecklistQuestionGroup, ChecklistQuestion
)
from loguru import logger


async def clear_all_checklists(force=False):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–ª–∏—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    db: Session = SessionLocal()
    
    try:
        logger.warning("üö® –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–ª–∏—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        logger.warning("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤!")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        checklists_count = db.query(Checklist).count()
        sections_count = db.query(ChecklistSection).count()
        subsections_count = db.query(ChecklistSubsection).count()
        question_groups_count = db.query(ChecklistQuestionGroup).count()
        questions_count = db.query(ChecklistQuestion).count()
        responses_count = db.query(checklist_response.model).count()
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        logger.info(f"  - –ß–µ–∫–ª–∏—Å—Ç–æ–≤: {checklists_count}")
        logger.info(f"  - –°–µ–∫—Ü–∏–π: {sections_count}")
        logger.info(f"  - –ü–æ–¥—Å–µ–∫—Ü–∏–π: {subsections_count}")
        logger.info(f"  - –ì—Ä—É–ø–ø –≤–æ–ø—Ä–æ—Å–æ–≤: {question_groups_count}")
        logger.info(f"  - –í–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
        logger.info(f"  - –û—Ç–≤–µ—Ç–æ–≤: {responses_count}")
        
        if checklists_count == 0:
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞. –ù–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ force
        if not force:
            confirm = input("\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —á–µ–∫–ª–∏—Å—Ç—ã? (yes/no): ")
            
            if confirm.lower() != 'yes':
                logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return
        
        logger.info("–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ...")
        
        # –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
        
        # 1. –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
        deleted_responses = db.query(checklist_response.model).delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {deleted_responses}")
        
        # 2. –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        deleted_questions = db.query(ChecklistQuestion).delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {deleted_questions}")
        
        # 3. –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        deleted_groups = db.query(ChecklistQuestionGroup).delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –≥—Ä—É–ø–ø –≤–æ–ø—Ä–æ—Å–æ–≤: {deleted_groups}")
        
        # 4. –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–µ–∫—Ü–∏–∏
        deleted_subsections = db.query(ChecklistSubsection).delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–¥—Å–µ–∫—Ü–∏–π: {deleted_subsections}")
        
        # 5. –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
        deleted_sections = db.query(ChecklistSection).delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–µ–∫—Ü–∏–π: {deleted_sections}")
        
        # 6. –£–¥–∞–ª—è–µ–º —á–µ–∫–ª–∏—Å—Ç—ã
        deleted_checklists = db.query(Checklist).delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {deleted_checklists}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        logger.success("‚úÖ –í—Å–µ —á–µ–∫–ª–∏—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–¥–∞–ª–µ–Ω–æ
        remaining_checklists = db.query(Checklist).count()
        remaining_sections = db.query(ChecklistSection).count()
        remaining_questions = db.query(ChecklistQuestion).count()
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:")
        logger.info(f"  - –û—Å—Ç–∞–ª–æ—Å—å —á–µ–∫–ª–∏—Å—Ç–æ–≤: {remaining_checklists}")
        logger.info(f"  - –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–∫—Ü–∏–π: {remaining_sections}")
        logger.info(f"  - –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining_questions}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {e}")
        db.rollback()
        raise
    finally:
        db.close()


async def clear_specific_checklist(slug: str, force=False):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞ –ø–æ slug"""
    
    await init_db()
    db: Session = SessionLocal()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º —á–µ–∫–ª–∏—Å—Ç
        checklist_obj = checklist.get_by_slug(db, slug)
        
        if not checklist_obj:
            logger.error(f"–ß–µ–∫–ª–∏—Å—Ç —Å slug '{slug}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        logger.warning(f"üö® –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–∞: {checklist_obj.title}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        sections_count = db.query(ChecklistSection).filter(
            ChecklistSection.checklist_id == checklist_obj.id
        ).count()
        
        questions_count = db.query(ChecklistQuestion).join(
            ChecklistQuestionGroup
        ).join(
            ChecklistSubsection
        ).join(
            ChecklistSection
        ).filter(
            ChecklistSection.checklist_id == checklist_obj.id
        ).count()
        
        responses_count = db.query(checklist_response.model).join(
            ChecklistQuestion
        ).join(
            ChecklistQuestionGroup
        ).join(
            ChecklistSubsection
        ).join(
            ChecklistSection
        ).filter(
            ChecklistSection.checklist_id == checklist_obj.id
        ).count()
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
        logger.info(f"  - –°–µ–∫—Ü–∏–π: {sections_count}")
        logger.info(f"  - –í–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
        logger.info(f"  - –û—Ç–≤–µ—Ç–æ–≤: {responses_count}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ force
        if not force:
            confirm = input(f"\n–£–¥–∞–ª–∏—Ç—å —á–µ–∫–ª–∏—Å—Ç '{checklist_obj.title}'? (yes/no): ")
            
            if confirm.lower() != 'yes':
                logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        deleted_responses = db.query(checklist_response.model).join(
            ChecklistQuestion
        ).join(
            ChecklistQuestionGroup
        ).join(
            ChecklistSubsection
        ).join(
            ChecklistSection
        ).filter(
            ChecklistSection.checklist_id == checklist_obj.id
        ).delete(synchronize_session=False)
        
        deleted_questions = db.query(ChecklistQuestion).join(
            ChecklistQuestionGroup
        ).join(
            ChecklistSubsection
        ).join(
            ChecklistSection
        ).filter(
            ChecklistSection.checklist_id == checklist_obj.id
        ).delete(synchronize_session=False)
        
        deleted_groups = db.query(ChecklistQuestionGroup).join(
            ChecklistSubsection
        ).join(
            ChecklistSection
        ).filter(
            ChecklistSection.checklist_id == checklist_obj.id
        ).delete(synchronize_session=False)
        
        deleted_subsections = db.query(ChecklistSubsection).join(
            ChecklistSection
        ).filter(
            ChecklistSection.checklist_id == checklist_obj.id
        ).delete(synchronize_session=False)
        
        deleted_sections = db.query(ChecklistSection).filter(
            ChecklistSection.checklist_id == checklist_obj.id
        ).delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º —á–µ–∫–ª–∏—Å—Ç
        db.delete(checklist_obj)
        
        db.commit()
        
        logger.success(f"‚úÖ –ß–µ–∫–ª–∏—Å—Ç '{checklist_obj.title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:")
        logger.info(f"  - –û—Ç–≤–µ—Ç–æ–≤: {deleted_responses}")
        logger.info(f"  - –í–æ–ø—Ä–æ—Å–æ–≤: {deleted_questions}")
        logger.info(f"  - –ì—Ä—É–ø–ø: {deleted_groups}")
        logger.info(f"  - –ü–æ–¥—Å–µ–∫—Ü–∏–π: {deleted_subsections}")
        logger.info(f"  - –°–µ–∫—Ü–∏–π: {deleted_sections}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–ª–∏—Å—Ç–∞: {e}")
        db.rollback()
        raise
    finally:
        db.close()


async def list_checklists():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–µ–∫–ª–∏—Å—Ç–æ–≤"""
    
    await init_db()
    db: Session = SessionLocal()
    
    try:
        checklists = checklist.get_active_checklists(db)
        
        if not checklists:
            logger.info("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —á–µ–∫–ª–∏—Å—Ç–æ–≤.")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {len(checklists)}")
        logger.info("–°–ø–∏—Å–æ–∫ —á–µ–∫–ª–∏—Å—Ç–æ–≤:")
        
        for i, cl in enumerate(checklists, 1):
            logger.info(f"  {i}. {cl.title} (slug: {cl.slug}, ID: {cl.id})")
            
    finally:
        db.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) < 2:
        logger.info("–ê—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ —á–µ–∫–ª–∏—Å—Ç–æ–≤...")
        await list_checklists()
        logger.info("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        logger.info("  python clear_checklists.py --list                    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ–∫–ª–∏—Å—Ç–æ–≤")
        logger.info("  python clear_checklists.py --clear-all              # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–µ–∫–ª–∏—Å—Ç—ã")
        logger.info("  python clear_checklists.py --clear-all --force      # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–µ–∫–ª–∏—Å—Ç—ã –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        logger.info("  python clear_checklists.py --clear-slug <slug>      # –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç")
        logger.info("  python clear_checklists.py --clear-slug <slug> --force # –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return
    
    command = sys.argv[1]
    force = "--force" in sys.argv
    
    if command == "--list":
        await list_checklists()
    elif command == "--clear-all":
        await clear_all_checklists(force=force)
    elif command == "--clear-slug":
        if len(sys.argv) < 3:
            logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å slug —á–µ–∫–ª–∏—Å—Ç–∞")
            return
        slug = sys.argv[2]
        await clear_specific_checklist(slug, force=force)
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")


if __name__ == "__main__":
    asyncio.run(main()) 
