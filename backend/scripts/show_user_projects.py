#!/usr/bin/env python3
"""
–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

Usage:
    python show_user_projects.py <email_or_username>
    python show_user_projects.py makishvili@yandex.ru
    python show_user_projects.py makishvili
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent.parent))

from sqlalchemy.orm import Session
from app.database.connection import SessionLocal

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π
from app.database.models import user, project, text, character, token, checklist
from app.database.models.user import User
from app.database.models.project import Project
from app.database.models.text import Text
from app.database.models.character import Character


def get_user_by_email_or_username(db: Session, identifier: str) -> User | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ username."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ email
    user = db.query(User).filter(User.email == identifier).first()
    if user:
        return user
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ username
    user = db.query(User).filter(User.username == identifier).first()
    return user


def show_user_projects(identifier: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = SessionLocal()
    
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user_by_email_or_username(db, identifier)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email –∏–ª–∏ username '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} ({user.email})")
        print(f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')}")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if user.is_active else '–ù–µ—Ç'}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        projects = db.query(Project).filter(Project.user_id == user.id).order_by(Project.created_at.desc()).all()
        
        if not projects:
            print("üìÅ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤")
            return
        
        print(f"üìÇ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({len(projects)}):")
        print("=" * 80)
        
        for i, project in enumerate(projects, 1):
            print(f"{i}. üìÅ {project.title}")
            if project.description:
                print(f"   üìù {project.description}")
            print(f"   üÜî ID: {project.id}")
            print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {project.created_at.strftime('%d.%m.%Y %H:%M')}")
            print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {project.updated_at.strftime('%d.%m.%Y %H:%M')}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
            texts = db.query(Text).filter(Text.project_id == project.id).all()
            print(f"   üìö –¢–µ–∫—Å—Ç–æ–≤: {len(texts)}")
            
            if texts:
                processed_texts = [t for t in texts if t.processed_at]
                unprocessed_texts = [t for t in texts if not t.processed_at]
                
                print(f"      ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_texts)}")
                print(f"      ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {len(unprocessed_texts)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
                for text in texts:
                    status = "‚úÖ" if text.processed_at else "‚è≥"
                    print(f"      {status} {text.filename} ({text.original_format})")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
                    if text.processed_at:
                        characters = db.query(Character).filter(Character.text_id == text.id).all()
                        if characters:
                            print(f"         üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(characters)}")
                            for char in characters[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3
                                importance = f" ({int(char.importance_score * 100)}%)" if char.importance_score else ""
                                print(f"         ‚Ä¢ {char.name}{importance}")
                            if len(characters) > 3:
                                print(f"         ‚Ä¢ ... –∏ –µ—â–µ {len(characters) - 3}")
            print()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_texts = sum(len(db.query(Text).filter(Text.project_id == p.id).all()) for p in projects)
        total_processed = sum(len([t for t in db.query(Text).filter(Text.project_id == p.id).all() if t.processed_at]) for p in projects)
        total_characters = sum(len(db.query(Character).join(Text).filter(Text.project_id == p.id).all()) for p in projects)
        
        print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
        print(f"   üìö –í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤: {total_texts}")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {total_processed}")
        print(f"   üë• –í—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {total_characters}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) != 2:
        print("Usage: python show_user_projects.py <email_or_username>")
        print("Example: python show_user_projects.py makishvili@yandex.ru")
        print("Example: python show_user_projects.py makishvili")
        sys.exit(1)
    
    identifier = sys.argv[1]
    show_user_projects(identifier)


if __name__ == "__main__":
    main()
