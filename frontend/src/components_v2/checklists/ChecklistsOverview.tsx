import React from 'react';
import { useQuery } from 'react-query';
import { useParams, useNavigate } from 'react-router-dom';

import { checklistApi, charactersApi } from '../../services/api';
// import { RecommendedNextStep } from './RecommendedNextStep';
// import { ChecklistGroup } from './ChecklistGroup';
// import { OverallProgress } from './OverallProgress';
// import { ChecklistSwitcher } from './ChecklistSwitcher';

interface ChecklistsOverviewProps {}

export const ChecklistsOverview: React.FC<ChecklistsOverviewProps> = () => {
  const { characterId } = useParams<{ characterId: string }>();
  const navigate = useNavigate();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const { data: character, isLoading: characterLoading } = useQuery({
    queryKey: ['character', characterId],
    queryFn: () => charactersApi.getById(characterId!),
    enabled: !!characterId
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫–ª–∏—Å—Ç–æ–≤
  const { data: checklists, isLoading: checklistsLoading } = useQuery({
    queryKey: ['checklists'],
    queryFn: () => checklistApi.getAll(),
    staleTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —á–µ–∫–ª–∏—Å—Ç–∞–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const { data: progress } = useQuery({
    queryKey: ['checklist-progress', characterId],
    queryFn: () => checklistApi.getCharacterProgress(parseInt(characterId!)),
    enabled: !!characterId,
    staleTime: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
  });

  if (!characterId || isNaN(parseInt(characterId))) {
    return (
      <div className="checklists-overview__error">
        <div className="error-content">
          <h1>–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h1>
          <button onClick={() => navigate('/')} className="btn btn-primary">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }

  if (characterLoading || checklistsLoading) {
    return (
      <div className="checklists-overview__loading">
        <div className="loading-content">
          <div className="spinner"></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...</span>
        </div>
      </div>
    );
  }

  // TODO: Implement checklist grouping logic
  const groupedChecklists = {
    basic: [],
    advanced: [],
    psychological: []
  };

  return (
    <div className="checklists-overview">
      {/* Header */}
      <div className="checklists-overview__header">
        <button
          onClick={() => navigate(-1)}
          className="btn btn-secondary"
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        
        <div className="character-info">
          <h1>{character?.name}</h1>
          {character?.description && <p>{character.description}</p>}
        </div>
      </div>

      {/* Main Content */}
      <div className="checklists-overview__content">
        
        {/* Temporary content - will be replaced with components */}
        <div style={{ padding: '2rem', textAlign: 'center' }}>
          <h2>üé® New Design v2 is Loading...</h2>
          <p>–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏.</p>
          
          <div style={{ marginTop: '2rem', padding: '1rem', background: '#f3f4f6', borderRadius: '0.5rem' }}>
            <h3>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</h3>
            <ul style={{ listStyle: 'none', padding: 0 }}>
              <li>üìä OverallProgress - –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</li>
              <li>üéØ RecommendedNextStep - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —à–∞–≥</li>
              <li>üìã ChecklistGroup - –≥—Ä—É–ø–ø—ã —á–µ–∫–ª–∏—Å—Ç–æ–≤</li>
              <li>üîÑ ChecklistSwitcher - –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —á–µ–∫–ª–∏—Å—Ç–æ–≤</li>
            </ul>
          </div>
          
          {character && (
            <div style={{ marginTop: '2rem', padding: '1rem', background: '#dbeafe', borderRadius: '0.5rem' }}>
              <h4>–î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:</h4>
              <p><strong>{character.name}</strong></p>
              {character.description && <p>{character.description}</p>}
            </div>
          )}
          
          {checklists && (
            <div style={{ marginTop: '1rem', padding: '1rem', background: '#d1fae5', borderRadius: '0.5rem' }}>
              <h4>–î–æ—Å—Ç—É–ø–Ω–æ —á–µ–∫–ª–∏—Å—Ç–æ–≤: {checklists.length}</h4>
            </div>
          )}
          
          {progress && (
            <div style={{ marginTop: '1rem', padding: '1rem', background: '#fef3c7', borderRadius: '0.5rem' }}>
              <h4>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {progress.length} –∑–∞–ø–∏—Å–µ–π</h4>
            </div>
          )}
        </div>

        {/* Components will be uncommented as they're implemented
        <OverallProgress 
          progress={progress}
          character={character}
        />

        <RecommendedNextStep 
          progress={progress}
          checklists={checklists}
          characterId={parseInt(characterId)}
        />

        <div className="checklist-groups">
          <ChecklistGroup
            title="–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"
            description="–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
            checklists={groupedChecklists.basic}
            progress={progress}
            characterId={parseInt(characterId)}
            type="basic"
          />
          
          <ChecklistGroup
            title="–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
            description="–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"
            checklists={groupedChecklists.advanced}
            progress={progress}
            characterId={parseInt(characterId)}
            type="advanced"
          />
          
          <ChecklistGroup
            title="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            description="–ì–ª—É–±–∏–Ω–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã"
            checklists={groupedChecklists.psychological}
            progress={progress}
            characterId={parseInt(characterId)}
            type="psychological"
          />
        </div>

        <ChecklistSwitcher 
          characterId={parseInt(characterId)}
          currentChecklist={null}
        />
        */}
      </div>
    </div>
  );
};
