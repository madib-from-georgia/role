/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ Blob –¥–∞–Ω–Ω—ã—Ö
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
 */
export const isMobileDevice = (): boolean => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±—Ä–∞—É–∑–µ—Ä Safari –Ω–∞ iOS
 */
export const isIOSSafari = (): boolean => {
  const ua = navigator.userAgent;
  return /iPad|iPhone|iPod/.test(ua) && /Safari/.test(ua) && !/CriOS|FxiOS|OPiOS|mercury/.test(ua);
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
 */
const getMimeType = (fileName: string): string => {
  const extension = fileName.split('.').pop()?.toLowerCase();
  
  const mimeTypes: Record<string, string> = {
    'pdf': 'application/pdf',
    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'doc': 'application/msword',
    'txt': 'text/plain',
    'html': 'text/html',
    'json': 'application/json',
    'xml': 'application/xml',
    'zip': 'application/zip',
    'png': 'image/png',
    'jpg': 'image/jpeg',
    'jpeg': 'image/jpeg',
    'gif': 'image/gif',
    'svg': 'image/svg+xml'
  };
  
  return mimeTypes[extension || ''] || 'application/octet-stream';
};

/**
 * –°–æ–∑–¥–∞–µ—Ç blob —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME-—Ç–∏–ø–æ–º
 */
const createTypedBlob = (blob: Blob, fileName: string): Blob => {
  const mimeType = getMimeType(fileName);
  
  // –ï—Å–ª–∏ blob —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME-—Ç–∏–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (blob.type === mimeType) {
    return blob;
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π blob —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME-—Ç–∏–ø–æ–º
  return new Blob([blob], { type: mimeType });
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Share API
 */
const isWebShareSupported = (): boolean => {
  return 'share' in navigator && 'canShare' in navigator;
};

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Web Share API (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
 */
const shareFile = async (blob: Blob, fileName: string): Promise<boolean> => {
  if (!isWebShareSupported()) {
    return false;
  }

  try {
    const file = new File([blob], fileName, { type: blob.type });
    
    if (navigator.canShare && navigator.canShare({ files: [file] })) {
      await navigator.share({
        files: [file],
        title: '–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
        text: `–§–∞–π–ª: ${fileName}`
      });
      return true;
    }
  } catch (error) {
    console.log('Web Share API –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:', error);
  }
  
  return false;
};


/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç blob –≤ data URL
 */
const blobToDataURL = (blob: Blob): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ iOS Safari
 */
const createIOSDownloadLink = async (blob: Blob, fileName: string): Promise<void> => {
  try {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º blob –≤ data URL
    const dataURL = await blobToDataURL(blob);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É —Å data URL
    const link = document.createElement('a');
    link.href = dataURL;
    link.download = fileName;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    link.setAttribute('target', '_blank');
    link.setAttribute('rel', 'noopener noreferrer');
    
    // –°—Ç–∏–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫—É
    link.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 10000;
      background: #007bff;
      color: white;
      padding: 15px 25px;
      border-radius: 8px;
      text-decoration: none;
      font-size: 16px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `;
    
    link.textContent = `üìÑ –°–∫–∞—á–∞—Ç—å ${fileName}`;
    
    // –°–æ–∑–¥–∞–µ–º overlay
    const overlay = document.createElement('div');
    overlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 9999;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
      box-sizing: border-box;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    const instruction = document.createElement('div');
    instruction.innerHTML = `
      <div style="
        background: white;
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 20px;
        text-align: center;
        max-width: 300px;
        color: #333;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      ">
        <h3 style="margin: 0 0 15px 0; font-size: 18px;">–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞</h3>
        <p style="margin: 0 0 15px 0; font-size: 14px; line-height: 1.4;">
          –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∑–∞—Ç–µ–º –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –§–∞–π–ª—ã"
        </p>
      </div>
    `;
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeButton = document.createElement('button');
    closeButton.textContent = '‚úï –ó–∞–∫—Ä—ã—Ç—å';
    closeButton.style.cssText = `
      background: #6c757d;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      margin-top: 15px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `;
    
    closeButton.onclick = () => {
      overlay.remove();
    };
    
    overlay.appendChild(instruction);
    overlay.appendChild(link);
    overlay.appendChild(closeButton);
    document.body.appendChild(overlay);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (document.body.contains(overlay)) {
        overlay.remove();
      }
    }, 30000);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è data URL:', error);
    // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É
    const url = window.URL.createObjectURL(blob);
    window.open(url, '_blank');
    setTimeout(() => window.URL.revokeObjectURL(url), 2000);
  }
};

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
 */
const downloadFileMobile = async (blob: Blob, fileName: string) => {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Web Share API
  const shared = await shareFile(blob, fileName);
  if (shared) {
    return;
  }

  // –î–ª—è iOS Safari –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å data URL
  if (isIOSSafari()) {
    await createIOSDownloadLink(blob, fileName);
    return;
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = fileName;
  
  // –î–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–µ–≤–∏–¥–∏–º–æ–π, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ DOM
  link.style.display = 'none';
  document.body.appendChild(link);
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const clickEvent = new MouseEvent('click', {
    view: window,
    bubbles: true,
    cancelable: true
  });
  
  link.dispatchEvent(clickEvent);
  
  // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
  setTimeout(() => {
    link.remove();
    window.URL.revokeObjectURL(url);
  }, 100);
};

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
 */
const downloadFileDesktop = (blob: Blob, fileName: string) => {
  // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è blob
  const url = window.URL.createObjectURL(blob);
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const link = document.createElement('a');
  link.href = url;
  link.download = fileName;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM –∏ –∫–ª–∏–∫–∞–µ–º
  document.body.appendChild(link);
  link.click();
  
  // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
  link.remove();
  window.URL.revokeObjectURL(url);
};

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 */
export const downloadFile = async (blob: Blob, fileName: string) => {
  // –°–æ–∑–¥–∞–µ–º blob —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME-—Ç–∏–ø–æ–º
  const typedBlob = createTypedBlob(blob, fileName);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  if (!isDownloadSupported()) {
    // –ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
    const url = window.URL.createObjectURL(typedBlob);
    window.open(url, '_blank');
    setTimeout(() => window.URL.revokeObjectURL(url), 1000);
    return;
  }
  
  // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  if (isMobileDevice()) {
    await downloadFileMobile(typedBlob, fileName);
  } else {
    downloadFileDesktop(typedBlob, fileName);
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ response
 */
export const extractFileName = (
  contentDisposition: string | null,
  defaultName: string,
  format: string
): string => {
  if (contentDisposition) {
    const fileNameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
    if (fileNameMatch && fileNameMatch[1]) {
      return fileNameMatch[1].replace(/['"]/g, '');
    }
  }
  
  const timestamp = new Date().toISOString().slice(0, 16).replace(/[:-]/g, '');
  return `${defaultName}_${timestamp}.${format}`;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –±—Ä–∞—É–∑–µ—Ä–æ–º
 */
export const isDownloadSupported = (): boolean => {
  const link = document.createElement('a');
  return typeof link.download !== 'undefined';
};
