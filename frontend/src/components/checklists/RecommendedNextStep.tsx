import React from 'react';
import { useNavigate } from 'react-router-dom';

interface RecommendedNextStepProps {
  progress: any[];
  checklists: any[];
  characterId: number;
}

export const RecommendedNextStep: React.FC<RecommendedNextStepProps> = ({
  progress,
  checklists,
  characterId
}) => {
  const navigate = useNavigate();

  // TODO: Implement smart recommendation logic
  const getRecommendedStep = () => {
    if (!progress || !checklists) return null;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ–æ–±—â–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–≤—ã–π —á–µ–∫–ª–∏—Å—Ç
    if (progress.length === 0) {
      const firstChecklist = checklists.find(c => c.slug === 'physical') || checklists[0];
      if (!firstChecklist) return null;
      
      return {
        type: 'start',
        checklist: firstChecklist,
        progress: null,
        reason: "–ù–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –±–∞–∑–æ–≤–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞"
      };
    }
    
    // –ò—â–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–µ–∫–ª–∏—Å—Ç—ã
    const incompleteChecklists = progress.filter(p => p.completion_percentage < 100);
    
    // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    if (incompleteChecklists.length === 0) {
      return {
        type: 'completed',
        checklist: null,
        progress: null,
        reason: "–í—Å–µ —á–µ–∫–ª–∏—Å—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
      };
    }
    
    // –ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–≤—ã–π
    const firstIncomplete = incompleteChecklists[0];
    const checklist = checklists.find(c => c.id === firstIncomplete.checklist_id);
    
    // –ï—Å–ª–∏ —á–µ–∫–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (!checklist) return null;
    
    return {
      type: 'continue',
      checklist,
      progress: firstIncomplete,
      reason: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–µ—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã"
    };
  };

  const recommendedStep = getRecommendedStep();

  if (!recommendedStep) {
    return null; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
  }

  // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
  if (recommendedStep.type === 'completed') {
    return (
      <div className="recommended-step recommended-step--completed">
        <div className="recommended-step__content">
          <div className="recommended-step__icon">üéâ</div>
          <div className="recommended-step__text">
            <h3>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</h3>
            <p>–í—Å–µ —á–µ–∫–ª–∏—Å—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</p>
          </div>
        </div>
      </div>
    );
  }

  const handleStartStep = () => {
    if (recommendedStep.checklist?.slug) {
      navigate(`/characters/${characterId}/checklists/${recommendedStep.checklist.slug}`);
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const headerText = recommendedStep.type === 'start' ? '–ù–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥';
  const buttonText = recommendedStep.type === 'start' ? '–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ ‚Üí' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí';

  return (
    <div className="recommended-step">
      <div className="recommended-step__header">
        <h2>{headerText}</h2>
        <span className="recommended-step__badge">Smart AI</span>
      </div>
      
      <div className="recommended-step__content">
        <div className="recommended-step__info">
          <div className="recommended-step__icon">
            {recommendedStep.checklist?.icon || 'üìù'}
          </div>
          
          <div className="recommended-step__text">
            <h3>{recommendedStep.checklist?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç'}</h3>
            <p className="recommended-step__reason">
              {recommendedStep.reason}
            </p>
            
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ */}
            {recommendedStep.progress && (
              <div className="recommended-step__progress">
                –ü—Ä–æ–≥—Ä–µ—Å—Å: {recommendedStep.progress.completion_percentage || 0}%
                ({recommendedStep.progress.answered_questions || 0} –∏–∑ {recommendedStep.progress.total_questions || 0} –≤–æ–ø—Ä–æ—Å–æ–≤)
              </div>
            )}
          </div>
        </div>
        
        <div className="recommended-step__actions">
          <button 
            onClick={handleStartStep}
            className="btn btn-primary btn-large"
          >
            {buttonText}
          </button>
          
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å */}
          {recommendedStep.progress && (
            <div className="recommended-step__time-estimate">
              ‚âà {Math.max(1, Math.ceil(((recommendedStep.progress.total_questions || 0) - (recommendedStep.progress.answered_questions || 0)) / 4))} –º–∏–Ω
            </div>
          )}
          
          {/* –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é */}
          {recommendedStep.type === 'start' && (
            <div className="recommended-step__time-estimate">
              ‚âà 10-15 –º–∏–Ω –Ω–∞ —á–µ–∫–ª–∏—Å—Ç
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
