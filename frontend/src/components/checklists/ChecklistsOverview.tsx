import React from 'react';
import { useQuery } from 'react-query';
import { useParams, useNavigate } from 'react-router-dom';
import { Button } from "@gravity-ui/uikit";

import { checklistApi, charactersApi } from '../../services/api';
import { RecommendedNextStep } from './RecommendedNextStep';
import { ChecklistGroup } from './ChecklistGroup';
import { OverallProgress } from './OverallProgress';
import { ChecklistSwitcher } from './ChecklistSwitcher';
import { ExportDialog } from './ExportDialog';

interface ChecklistsOverviewProps {}

export const ChecklistsOverview: React.FC<ChecklistsOverviewProps> = () => {
  const { characterId } = useParams<{ characterId: string }>();
  const navigate = useNavigate();
  const [isExportDialogOpen, setIsExportDialogOpen] = React.useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const { data: character, isLoading: characterLoading } = useQuery({
    queryKey: ['character', characterId],
    queryFn: () => charactersApi.getById(characterId!),
    enabled: !!characterId
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫–ª–∏—Å—Ç–æ–≤
  const { data: checklists, isLoading: checklistsLoading } = useQuery({
    queryKey: ['checklists', characterId],
    queryFn: () => checklistApi.getAll(characterId ? parseInt(characterId) : undefined),
    enabled: !!characterId,
    staleTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —á–µ–∫–ª–∏—Å—Ç–∞–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const { data: progress } = useQuery({
    queryKey: ['checklist-progress', characterId],
    queryFn: () => checklistApi.getCharacterProgress(parseInt(characterId!)),
    enabled: !!characterId,
    staleTime: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
  });

  console.log(progress);
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —á–µ–∫–ª–∏—Å—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º (–≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ö—É–∫–æ–≤)
  const groupedChecklists = React.useMemo(() => {
    if (!checklists) {
      return { basic: [], advanced: [], psychological: [] };
    }

    const basic: any[] = [];
    const advanced: any[] = [];
    const psychological: any[] = [];

    checklists.forEach((checklist: any) => {
      const slug = checklist.slug.toLowerCase();
      
      // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
      if (slug.includes('physical') || slug.includes('emotional') || slug.includes('speech')) {
        basic.push(checklist);
      }
      // –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑  
      else if (slug.includes('internal') || slug.includes('motivation') || slug.includes('relationships') || 
               slug.includes('biography') || slug.includes('social') || slug.includes('scenes') || 
               slug.includes('tasks') || slug.includes('exercises')) {
        advanced.push(checklist);
      }
      // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
      else if (slug.includes('subtext') || slug.includes('tempo') || slug.includes('personality') || 
               slug.includes('defense') || slug.includes('trauma') || slug.includes('archetypes') || 
               slug.includes('emotional-intelligence') || slug.includes('cognitive') || slug.includes('attachment')) {
        psychological.push(checklist);
      }
      // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –±–∞–∑–æ–≤—ã–π
      else {
        basic.push(checklist);
      }
    });

    return { basic, advanced, psychological };
  }, [checklists]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ö—É–∫–æ–≤
  if (!characterId || isNaN(parseInt(characterId))) {
    return (
      <div className="checklists-overview__error">
        <div className="error-content">
          <h1>–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h1>
          <button onClick={() => navigate('/')} className="btn btn-primary">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }

  if (characterLoading || checklistsLoading) {
    return (
      <div className="checklists-overview__loading">
        <div className="loading-content">
          <div className="spinner"></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="checklists-overview">
      {/* Header */}
      <div className="checklists-overview__header">
          <Button
            onClick={() => navigate(-1)}
            view="outlined"
          >
            ‚Üê 
          </Button>
        
        <div className="character-info">
          <h1>{character?.name}</h1>
          {character?.description && <p>{character.description}</p>}
        </div>
          <Button
            onClick={() => setIsExportDialogOpen(true)}
          >
            üìÑ –≠–∫—Å–ø–æ—Ä—Ç
          </Button>
      </div>

      {/* Main Content */}
      <div className="checklists-overview__content">
        
        {/* Overall Progress */}
        <OverallProgress 
          progress={progress}
          character={character}
        />

        {/* Recommended Next Step */}
        <RecommendedNextStep 
          progress={progress}
          checklists={checklists}
          characterId={parseInt(characterId)}
        />

        {/* Checklist Groups */}
        <div className="checklist-groups">
          <ChecklistGroup
            title="–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"
            description="–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –≤–Ω–µ—à–Ω–æ—Å—Ç—å, —ç–º–æ—Ü–∏–∏, —Ä–µ—á—å"
            checklists={groupedChecklists.basic}
            progress={progress}
            characterId={parseInt(characterId)}
            type="basic"
          />
          
          <ChecklistGroup
            title="–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
            description="–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: –º–æ—Ç–∏–≤–∞—Ü–∏—è, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –±–∏–æ–≥—Ä–∞—Ñ–∏—è"
            checklists={groupedChecklists.advanced}
            progress={progress}
            characterId={parseInt(characterId)}
            type="advanced"
          />
          
          <ChecklistGroup
            title="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            description="–ì–ª—É–±–∏–Ω–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã: –ø–æ–¥—Ç–µ–∫—Å—Ç, –∑–∞—â–∏—Ç—ã, —Ç—Ä–∞–≤–º—ã"
            checklists={groupedChecklists.psychological}
            progress={progress}
            characterId={parseInt(characterId)}
            type="psychological"
          />
        </div>

        {/* Quick Checklist Switcher */}
        <ChecklistSwitcher 
          characterId={parseInt(characterId)}
          currentChecklist={null}
        />

      </div>

      {/* Export Dialog */}
      {character && (
        <ExportDialog
          characterId={parseInt(characterId)}
          characterName={character.name}
          isOpen={isExportDialogOpen}
          onClose={() => setIsExportDialogOpen(false)}
        />
      )}
    </div>
  );
};
